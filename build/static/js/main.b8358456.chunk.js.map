{"version":3,"sources":["entities/task.js","components/AddTask.js","components/taskItem.js","components/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["Task","text","this","isDone","AddTask","props","task_text","handleTaskInputChange","bind","handleAddTaskClick","addTaskCallback","onChange","id","type","onClick","event","target","value","task","React","Component","TaskItem","console","log","TaskList","tasks","tasksList","toggleTaskByText","push","forceUpdate","printTasks","list","elements","App","pushTask","setState","state","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0OAWeA,G,iBAVX,aAAwB,IAAZC,EAAW,uDAAJ,GAAI,oBACnBC,KAAKD,KAAOA,EACZC,KAAKC,QAAS,E,yDAIdD,KAAKC,QAAUD,KAAKC,W,MCJPC,E,YAGnB,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAHRC,UAAY,GAIV,EAAKC,sBAAwB,EAAKA,sBAAsBC,KAA3B,gBAC7B,EAAKC,mBAAqB,EAAKA,mBAAmBD,KAAxB,gBAC1B,EAAKE,gBAAkBL,EAAMK,gBAJb,E,sEAQd,OAAO,6BACD,2BAAOC,SAAUT,KAAKK,sBAAuBK,GAAG,aAAaC,KAAK,SAClE,6BACA,4BAAQC,QAASZ,KAAKO,oBAAtB,e,4CAIcM,GACpBb,KAAKI,UAAYS,EAAMC,OAAOC,Q,2CAI9B,GAAGf,KAAKQ,gBAAgB,CACtB,IAAIQ,EAAO,IAAIlB,EAAKE,KAAKI,WACzBJ,KAAKQ,gBAAgBQ,Q,GAzBQC,IAAMC,WCgB5BC,E,YAhBX,WAAYhB,GAAQ,IAAD,8BACf,4CAAMA,KACDJ,KAAOI,EAAMJ,KAFH,E,sEAOf,OAFAqB,QAAQC,IAAIrB,KAAKD,MAEV,4BACH,6BACKC,KAAKD,W,GAVCkB,IAAMC,WCgEdI,E,YA7DX,WAAYnB,GAAQ,IAAD,8BACf,4CAAMA,KACDoB,MAAQpB,EAAMqB,UACnB,EAAKC,iBAAmB,EAAKA,iBAAiBnB,KAAtB,gBACxB,EAAKiB,MAAMG,KAAK,IAAI5B,EAAK,cAJV,E,uFAOOK,GACtBH,KAAKuB,MAAQpB,EAAMqB,UACnBxB,KAAK2B,gB,+BAIL,OAAO,6BACH,4BACK3B,KAAK4B,WAAW5B,KAAKuB,W,iCAKvBM,GACP,IAAIC,EAAW,GADF,uBAIb,YAAiBD,EAAjB,+CAAuB,CAAC,IAAfb,EAAc,QACnBc,EAASJ,KAAK,kBAAC,EAAD,CAAU3B,KAAMiB,EAAKjB,SAL1B,kFAeb,OAAO+B,I,uCAKMjB,GACbO,QAAQC,IAAIR,EAAMC,QAClB,IAFoB,uBAGpB,YAAiBd,KAAKuB,MAAtB,+CAA6B,CAAC,IAArBP,EAAoB,QADlB,MAEHA,EAAKjB,MACLiB,EAAKS,oBALO,kFAQpBzB,KAAK2B,gB,kCAGGX,GACR,OAAIA,EAAKf,OACE,2BAAG,6BAAMe,EAAKjB,OAGd,2BAAIiB,EAAKjB,U,GAzDLkB,IAAMC,WCqBda,E,YAnBb,WAAY5B,GAAQ,IAAD,8BACjB,4CAAMA,KAFRoB,MAAQ,GAGN,EAAKS,SAAW,EAAKA,SAAS1B,KAAd,gBAFC,E,sEAKjB,OAAO,6BACL,kBAAC,EAAD,CAASE,gBAAiBR,KAAKgC,WAC/B,kBAAC,EAAD,CAAUR,UAAWxB,KAAKuB,W,+BAGrBP,GACHA,GACFhB,KAAKuB,MAAMG,KAAKV,GAElBhB,KAAKiC,SAASjC,KAAKkC,W,GAhBLjB,IAAMC,WCQJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,QD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b8358456.chunk.js","sourcesContent":["class Task {\r\n    constructor(text = \"\") {\r\n        this.text = text;\r\n        this.isDone = false;\r\n        \r\n    }\r\n    toggleDone() {\r\n        this.isDone = !this.isDone;\r\n    }\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from '../entities/task'\r\n\r\nexport default class AddTask extends React.Component{\r\n  task_text = '';\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.handleTaskInputChange = this.handleTaskInputChange.bind(this);\r\n    this.handleAddTaskClick = this.handleAddTaskClick.bind(this);\r\n    this.addTaskCallback = props.addTaskCallback;\r\n  }\r\n\r\n  render(){\r\n      return <div>\r\n            <input onChange={this.handleTaskInputChange} id=\"task_input\" type=\"text\"></input>\r\n            <br></br>\r\n            <button onClick={this.handleAddTaskClick}>Add task</button>\r\n      </div>\r\n    }\r\n\r\n    handleTaskInputChange(event){\r\n      this.task_text = event.target.value;\r\n    }\r\n\r\n    handleAddTaskClick(){\r\n      if(this.addTaskCallback){\r\n        let task = new Task(this.task_text);\r\n        this.addTaskCallback(task);\r\n      }\r\n    }\r\n  }","import React from 'react';\r\n\r\nclass TaskItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.text = props.text;\r\n    }\r\n    render() {\r\n        console.log(this.text);\r\n        \r\n        return <li>\r\n            <div>\r\n                {this.text}\r\n            </div>\r\n        </li>\r\n    }\r\n\r\n}\r\n\r\nexport default TaskItem;","import React from 'react';\r\nimport TaskItem from './taskItem';\r\nimport Task from '../entities/task';\r\n\r\nclass TaskList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.tasks = props.tasksList;\r\n        this.toggleTaskByText = this.toggleTaskByText.bind(this);\r\n        this.tasks.push(new Task(\"buy pizza\"));\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.tasks = props.tasksList;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <ul>\r\n                {this.printTasks(this.tasks)}\r\n            </ul>\r\n        </div>\r\n    }\r\n\r\n    printTasks(list) {\r\n        let elements = [];\r\n        // console.log(list);\r\n        \r\n        for (let task of list) {\r\n            elements.push(<TaskItem text={task.text}></TaskItem>);\r\n            \r\n            // elements.push(<li key={task.text}>\r\n            //             <div onClick={this.toggleTaskByText}>\r\n            //                 {this.getTaskText(task)}\r\n            //             </div>\r\n            //         </li>)\r\n        }\r\n        // console.log(elements);\r\n        \r\n        return elements;\r\n    }\r\n\r\n\r\n\r\n    toggleTaskByText(event) {\r\n        console.log(event.target);\r\n        let text = \"a\";\r\n        for (let task of this.tasks) {\r\n            if (task.text === text) {\r\n                task.toggleTaskByText();\r\n            }\r\n        }\r\n        this.forceUpdate();\r\n    }\r\n\r\n    getTaskText(task) {\r\n        if (task.isDone) {\r\n            return <p><del>{task.text}</del></p>\r\n        }\r\n        else {\r\n            return <p>{task.text}</p>\r\n        }\r\n    }\r\n\r\n}\r\nexport default TaskList;","import React from 'react';\nimport './App.css';\nimport AddTask from './components/AddTask';\nimport TaskList from './components/TaskList';\nclass App extends React.Component {\n  tasks = [];\n  constructor(props) {\n    super(props);\n    this.pushTask = this.pushTask.bind(this);\n  }\n  render() {\n    return <div>\n      <AddTask addTaskCallback={this.pushTask}></AddTask>\n      <TaskList tasksList={this.tasks}></TaskList>\n    </div>\n  }\n  pushTask(task) {\n    if (task)\n      this.tasks.push(task);\n    \n    this.setState(this.state);\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}