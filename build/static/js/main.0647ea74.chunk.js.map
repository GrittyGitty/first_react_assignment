{"version":3,"sources":["components/entities/task.js","components/connections/addTaskConnect.js","components/AddTask.js","components/connections/taskItemConnect.js","components/taskItem.js","components/connections/taskListConnect.js","components/TaskList.js","App.js","serviceWorker.js","components/reducers/deafultState.js","components/reducers/index.js","components/reducers/addTask.js","components/reducers/removeTask.js","components/reducers/updateTask.js","components/reducers/toggleTaskDone.js","index.js"],"names":["Task","text","this","isDone","connect","state","dispatch","addSome","some","type","payload","props","task_text","handleTaskInputChange","bind","handleAddTaskClick","onChange","id","onClick","event","target","value","React","Component","removeSome","toggleTaskDone","editTask","task","removeButtonHandler","toggleDoneButtonHandler","style","items","tasks","forceUpdate","printTasks","list","elements","push","key","App","console","log","Boolean","window","location","hostname","match","combineReducers","addTask","defaultState","action","removeTask","i","length","slice","concat","updateTask","toggleDone","store","createStore","reducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0647ea74.chunk.js","sourcesContent":["class Task {\r\n    constructor(text = \"\") {\r\n        this.text = text;\r\n        this.isDone = false;\r\n        \r\n    }\r\n    toggleDone() {\r\n        this.isDone = !this.isDone;\r\n    }\r\n}\r\n\r\nexport default Task;","import { connect } from 'react-redux';\r\nfunction mapStateToProps(state){\r\n    return {};\r\n}\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        addSome : (some) => {\r\n            dispatch({type : 'ADD_TASK', payload : some})\r\n        },\r\n        \r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps);","import React from 'react';\r\nimport Task from './entities/task';\r\nimport connect from './connections/addTaskConnect'\r\nclass AddTask extends React.Component {\r\n  task_text = '';\r\n  constructor(props) {\r\n    super(props);\r\n    this.addSome = props.addSome;\r\n    this.handleTaskInputChange = this.handleTaskInputChange.bind(this);\r\n    this.handleAddTaskClick = this.handleAddTaskClick.bind(this);\r\n  }\r\n  render() {\r\n    return <div>\r\n      <input onChange={this.handleTaskInputChange} id=\"task_input\" type=\"text\"></input>\r\n      <br></br>\r\n      <button onClick={this.handleAddTaskClick}>Add task</button>\r\n    </div>\r\n  }\r\n  handleTaskInputChange(event) {\r\n    this.task_text = event.target.value;\r\n  }\r\n  handleAddTaskClick() {\r\n   \r\n    this.addSome(new Task(this.task_text));\r\n  }\r\n}\r\nexport default connect(AddTask);","import { connect } from 'react-redux';\r\nfunction mapStateToProps(state){\r\n    return {};\r\n  }\r\n  \r\n  function mapDispatchToProps(dispatch){\r\n    return {\r\n        removeSome: (some) => {\r\n            dispatch({type : 'REMOVE_TASK', payload : some})\r\n        },\r\n        toggleTaskDone:(some) => {\r\n          dispatch({type : 'TASK_DONE', payload : some})\r\n       }\r\n    }\r\n  }\r\n  export default connect(mapStateToProps, mapDispatchToProps);","import React from 'react';\r\nimport connect from './connections/taskItemConnect'\r\n\r\nclass TaskItem extends React.Component {\r\n    text = '';\r\n    editTask =false;\r\n    constructor(props) {\r\n        super(props);\r\n        this.task = props.task;\r\n        this.removeButtonHandler = this.removeButtonHandler.bind(this);\r\n        this.toggleDoneButtonHandler = this.toggleDoneButtonHandler.bind(this);\r\n\r\n    }\r\n    render() {\r\n     if(!this.task.isDone)\r\n     {\r\n        if(!this.editTask){\r\n         return <li>\r\n         <div> \r\n            <span>{this.task.text}</span> \r\n            <button onClick={this.toggleDoneButtonHandler}>Done!</button>\r\n            <button onClick={this.removeButtonHandler}>Remove Task</button>\r\n         </div>\r\n        </li>\r\n        }\r\n        else{\r\n           return <li>\r\n           <div> \r\n            <input id=\"edit_text\" type=\"text\"></input>\r\n           </div>\r\n          </li>\r\n        }\r\n        \r\n     }\r\n     else{\r\n        return <li>\r\n        <div> \r\n           <span style={{\"textDecoration\":\"line-through\"}}>{this.task.text}</span> \r\n           <button onClick={this.toggleDoneButtonHandler}>unDone!</button>\r\n           <button onClick={this.removeButtonHandler}>Remove Task</button>\r\n        </div>\r\n        </li>\r\n     }\r\n    }\r\n   removeButtonHandler(){\r\n      this.props.removeSome(this.task);\r\n   }\r\n   toggleDoneButtonHandler(){\r\n      this.props.toggleTaskDone(this.task);\r\n\r\n   }\r\n}\r\nexport default connect(TaskItem);\r\n\r\n \r\n\r\n","import { connect } from 'react-redux';\r\nfunction mapStateToProps(state){\r\n    return {items : state.items};\r\n  }\r\n  \r\n  function mapDispatchToProps(dispatch){\r\n    return {};\r\n  }\r\n  export default connect(mapStateToProps, mapDispatchToProps);","import React from 'react';\r\nimport TaskItem from './taskItem';\r\nimport connect from './connections/taskListConnect'\r\nclass TaskList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.tasks = props.items\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.tasks = props.items;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <ul>\r\n                {this.printTasks(this.tasks)}\r\n            </ul>\r\n        </div>\r\n    }\r\n    printTasks(list) {\r\n        let elements = [];\r\n        // console.log(list);\r\n        for (let task of list) {\r\n            elements.push(<TaskItem task={task} key={task.text}></TaskItem>);                \r\n        }\r\n        return elements;\r\n    }\r\n}\r\n\r\nexport default connect(TaskList);","import React from 'react';\r\nimport './App.css';\r\nimport AddTask from './components/AddTask';\r\nimport TaskList from './components/TaskList';\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(\"something\");\r\n    \r\n  }\r\n  render() {\r\n      return <div>\r\n      <AddTask></AddTask>\r\n      <TaskList></TaskList>\r\n       </div>\r\n           \r\n    }\r\n  \r\n \r\n \r\n  \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import Task from '../entities/task';\r\nlet list = [new Task('kiki'),new Task('football'),new Task('bjjppppppo')];\r\nexport default {items:list};","import { combineReducers } from 'redux'\r\nimport addTask from './addTask';\r\nimport removeTask from './removeTask';\r\nimport updateTask from './updateTask';\r\nimport toggleTaskDone from './toggleTaskDone';\r\nexport default combineReducers({\r\n  addTask,\r\n  removeTask,\r\n  updateTask,\r\n  toggleTaskDone\r\n})","import defaultState from './deafultState'; \r\nexport default function addTask(state=defaultState, action) {\r\n    if(action.type === \"ADD_TASK\"){\r\n        console.log(\"in action!-ADD_TASK\");\r\n        return {items : [\r\n            ...state.items,\r\n            action.payload\r\n        ]}\r\n    } \r\n    if(action.type)\r\n    return state;\r\n}","import defaultState from './deafultState'; \r\nexport default function removeTask(state=defaultState, action) {\r\n    if(action.type ===\"REMOVE_TASK\"){\r\n        console.log(\"in action!-REMOVE_TASK\");\r\n        for(let i=0;i<state.items.length;i++){\r\n            if(state.items[i].text === (action.payload).text){\r\n                console.log(state.items.slice(0,i).concat(state.items.slice(i+1)));\r\n                state.items = state.items.slice(0,i).concat(state.items.slice(i+1));\r\n                 break;\r\n            }\r\n        }\r\n        return {items : [\r\n            ...state.items\r\n        ]}   \r\n    }\r\n    if(action.type)\r\n    return state;\r\n    \r\n}","import defaultState from './deafultState'; \r\nexport default function updateTask(state=defaultState, action) {\r\n    \r\n}","import defaultState from './deafultState'; \r\nexport default function toggleTaskDone(state = defaultState, action) {\r\n    if(action.type ===\"TASK_DONE\"){\r\n        console.log(\"in action!-TASK_DONE\");\r\n        for(let i=0;i<state.items.length;i++){\r\n            if(state.items[i].text === (action.payload).text){\r\n                state.items[i].toggleDone();\r\n            }\r\n        }\r\n        console.log(state.items);\r\n        return {items : [\r\n            ...state.items\r\n        ]}      \r\n    }\r\n    if(action.type)\r\n    return state;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport reducer from './components/reducers/index'\r\n\r\nlet store = createStore(reducer);\r\nReactDOM.render(\r\n<Provider store={store}>\r\n    <App />\r\n</Provider>,\r\n\r\ndocument.getElementById('app'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}