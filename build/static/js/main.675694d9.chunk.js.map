{"version":3,"sources":["entities/task.js","components/AddTask.js","components/taskItem.js","components/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["Task","text","this","isDone","AddTask","props","task_text","handleTaskInputChange","bind","handleAddTaskClick","addTaskCallback","onChange","id","type","onClick","event","target","value","task","React","Component","TaskItem","console","log","TaskList","tasks","tasksList","toggleTaskByText","push","forceUpdate","printTasks","list","elements","App","pushTask","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0OAWeA,G,iBAVX,aAAwB,IAAZC,EAAW,uDAAJ,GAAI,oBACnBC,KAAKD,KAAOA,EACZC,KAAKC,QAAS,E,yDAIdD,KAAKC,QAAUD,KAAKC,W,MCJPC,E,YAGnB,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAHRC,UAAY,GAIV,EAAKC,sBAAwB,EAAKA,sBAAsBC,KAA3B,gBAC7B,EAAKC,mBAAqB,EAAKA,mBAAmBD,KAAxB,gBAC1B,EAAKE,gBAAkBL,EAAMK,gBAJb,E,sEAQd,OAAO,6BACD,2BAAOC,SAAUT,KAAKK,sBAAuBK,GAAG,aAAaC,KAAK,SAClE,6BACA,4BAAQC,QAASZ,KAAKO,oBAAtB,e,4CAIcM,GACpBb,KAAKI,UAAYS,EAAMC,OAAOC,Q,2CAI9B,GAAGf,KAAKQ,gBAAgB,CACtB,IAAIQ,EAAO,IAAIlB,EAAKE,KAAKI,WACzBJ,KAAKQ,gBAAgBQ,Q,GAzBQC,IAAMC,WCgB5BC,E,YAhBX,WAAYhB,GAAQ,IAAD,8BACf,4CAAMA,KACDJ,KAAOI,EAAMJ,KAFH,E,sEAOf,OAFAqB,QAAQC,IAAIrB,KAAKD,MAEV,4BACH,6BACKC,KAAKD,W,GAVCkB,IAAMC,WCgEdI,E,YA7DX,WAAYnB,GAAQ,IAAD,8BACf,4CAAMA,KACDoB,MAAQpB,EAAMqB,UACnB,EAAKC,iBAAmB,EAAKA,iBAAiBnB,KAAtB,gBACxB,EAAKiB,MAAMG,KAAK,IAAI5B,EAAK,cAJV,E,uFAOOK,GACtBH,KAAKuB,MAAQpB,EAAMqB,UACnBxB,KAAK2B,gB,+BAIL,OAAO,6BACH,4BACK3B,KAAK4B,WAAW5B,KAAKuB,W,iCAKvBM,GACP,IAAIC,EAAW,GADF,uBAIb,YAAiBD,EAAjB,+CAAuB,CAAC,IAAfb,EAAc,QACnBc,EAASJ,KAAK,kBAAC,EAAD,CAAU3B,KAAMiB,EAAKjB,SAL1B,kFAeb,OAAO+B,I,uCAKMjB,GACbO,QAAQC,IAAIR,EAAMC,QAClB,IAFoB,uBAGpB,YAAiBd,KAAKuB,MAAtB,+CAA6B,CAAC,IAArBP,EAAoB,QADlB,MAEHA,EAAKjB,MACLiB,EAAKS,oBALO,kFAQpBzB,KAAK2B,gB,kCAGGX,GACR,OAAIA,EAAKf,OACE,2BAAG,6BAAMe,EAAKjB,OAGd,2BAAIiB,EAAKjB,U,GAzDLkB,IAAMC,WCqBda,E,YAnBb,WAAY5B,GAAQ,IAAD,8BACjB,4CAAMA,KAFRoB,MAAQ,GAGN,EAAKS,SAAW,EAAKA,SAAS1B,KAAd,gBAFC,E,sEAKjB,OAAO,6BACL,kBAAC,EAAD,CAASE,gBAAiBR,KAAKgC,WAC/B,kBAAC,EAAD,CAAUR,UAAWxB,KAAKuB,W,+BAGrBP,GACHA,GACFhB,KAAKuB,MAAMG,KAAKV,GAElBhB,KAAK2B,kB,GAhBSV,IAAMC,WCQJe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,QD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.675694d9.chunk.js","sourcesContent":["class Task {\r\n    constructor(text = \"\") {\r\n        this.text = text;\r\n        this.isDone = false;\r\n        \r\n    }\r\n    toggleDone() {\r\n        this.isDone = !this.isDone;\r\n    }\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from '../entities/task'\r\n\r\nexport default class AddTask extends React.Component{\r\n  task_text = '';\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.handleTaskInputChange = this.handleTaskInputChange.bind(this);\r\n    this.handleAddTaskClick = this.handleAddTaskClick.bind(this);\r\n    this.addTaskCallback = props.addTaskCallback;\r\n  }\r\n\r\n  render(){\r\n      return <div>\r\n            <input onChange={this.handleTaskInputChange} id=\"task_input\" type=\"text\"></input>\r\n            <br></br>\r\n            <button onClick={this.handleAddTaskClick}>Add task</button>\r\n      </div>\r\n    }\r\n\r\n    handleTaskInputChange(event){\r\n      this.task_text = event.target.value;\r\n    }\r\n\r\n    handleAddTaskClick(){\r\n      if(this.addTaskCallback){\r\n        let task = new Task(this.task_text);\r\n        this.addTaskCallback(task);\r\n      }\r\n    }\r\n  }","import React from 'react';\r\n\r\nclass TaskItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.text = props.text;\r\n    }\r\n    render() {\r\n        console.log(this.text);\r\n        \r\n        return <li>\r\n            <div>\r\n                {this.text}\r\n            </div>\r\n        </li>\r\n    }\r\n\r\n}\r\n\r\nexport default TaskItem;","import React from 'react';\r\nimport TaskItem from './taskItem';\r\nimport Task from '../entities/task';\r\n\r\nclass TaskList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.tasks = props.tasksList;\r\n        this.toggleTaskByText = this.toggleTaskByText.bind(this);\r\n        this.tasks.push(new Task(\"buy pizza\"));\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.tasks = props.tasksList;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <ul>\r\n                {this.printTasks(this.tasks)}\r\n            </ul>\r\n        </div>\r\n    }\r\n\r\n    printTasks(list) {\r\n        let elements = [];\r\n        // console.log(list);\r\n        \r\n        for (let task of list) {\r\n            elements.push(<TaskItem text={task.text}></TaskItem>);\r\n            \r\n            // elements.push(<li key={task.text}>\r\n            //             <div onClick={this.toggleTaskByText}>\r\n            //                 {this.getTaskText(task)}\r\n            //             </div>\r\n            //         </li>)\r\n        }\r\n        // console.log(elements);\r\n        \r\n        return elements;\r\n    }\r\n\r\n\r\n\r\n    toggleTaskByText(event) {\r\n        console.log(event.target);\r\n        let text = \"a\";\r\n        for (let task of this.tasks) {\r\n            if (task.text === text) {\r\n                task.toggleTaskByText();\r\n            }\r\n        }\r\n        this.forceUpdate();\r\n    }\r\n\r\n    getTaskText(task) {\r\n        if (task.isDone) {\r\n            return <p><del>{task.text}</del></p>\r\n        }\r\n        else {\r\n            return <p>{task.text}</p>\r\n        }\r\n    }\r\n\r\n}\r\nexport default TaskList;","import React from 'react';\r\nimport './App.css';\r\nimport AddTask from './components/AddTask';\r\nimport TaskList from './components/TaskList';\r\nclass App extends React.Component {\r\n  tasks = [];\r\n  constructor(props) {\r\n    super(props);\r\n    this.pushTask = this.pushTask.bind(this);\r\n  }\r\n  render() {\r\n    return <div>\r\n      <AddTask addTaskCallback={this.pushTask}></AddTask>\r\n      <TaskList tasksList={this.tasks}></TaskList>\r\n    </div>\r\n  }\r\n  pushTask(task) {\r\n    if (task)\r\n      this.tasks.push(task);\r\n    \r\n    this.forceUpdate();\r\n  }\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('app'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}